import 'dart:convert';import 'package:dio/dio.dart';import 'package:flutter/material.dart';import 'package:flutter_easyrefresh/easy_refresh.dart';import 'package:yoga/api/request.dart';import 'package:yoga/model/ShoppingInfo.dart';import 'ProductDetails.dart';class SearchShopping extends StatefulWidget {  SearchShoppingState createState() => SearchShoppingState();  static void share() {}}class SearchShoppingState extends State<SearchShopping> {  int PageNo = 1;  int datalength = 0;  bool Layout = true;  bool barlayout = false;  bool columnlayout = false;  List datas = [];  int totalPagenum = 1;  //用户选择状态,默认为1:选择综合,2:选择销量正序,3:选择销量降序,4:选择价格升序5:选择价格降序  int status = 1;  bool salesVolumesort = true;  bool pricesort = true;  TextEditingController input_text = TextEditingController();  void search_shopping(firstsearch, status) async {    if (firstsearch == true) {      PageNo = 1;    } else if (firstsearch == false || PageNo <= totalPagenum) {      PageNo++;    }    Response response = await RequestService.PagedQueryShopping(PageNo: PageNo,input_text: input_text.text,status: status);    if (response.statusCode == 200) {      ShoppingInfo shoppinginfo =          ShoppingInfo.fromJson(json.decode(response.toString()));      if (shoppinginfo.shoppinginfos[0].totalPageNum == 0) {        print('没有此商品');      } else {        setState(() {          if (firstsearch == true) {            barlayout = true;            datas.clear();            datas.addAll(shoppinginfo.shoppinginfos[0].productinfoList);          } else if (firstsearch == false || PageNo <= totalPagenum) {            datas..addAll(shoppinginfo.shoppinginfos[0].productinfoList);          }          datalength = datas.length;          totalPagenum = shoppinginfo.shoppinginfos[0].totalPageNum;        });      }    }  }  @override  Widget build(BuildContext context) {    return SafeArea(      child: DefaultTabController(        length: 3,        child: Scaffold(            appBar: AppBar(              elevation: 0.0,              title: Row(                children: <Widget>[                  Expanded(                    child: TextField(                      decoration: InputDecoration(                        enabledBorder: UnderlineInputBorder(                          borderSide: BorderSide(color: Colors.black12),                        ),                        focusedBorder: UnderlineInputBorder(                          borderSide: BorderSide(color: Colors.black12),                        ),                      ),                      controller: input_text,                    ),                  ),                  IconButton(                      onPressed: () {                        FocusScope.of(context).requestFocus(FocusNode());                        search_shopping(true, 1);                      },                      icon: Icon(Icons.search)),                ],              ),            ),            body: Column(              children: <Widget>[                barlayout == false                    ? Expanded(child: Container())                    : Container(                        child: Row(                          children: <Widget>[                            Container(                              child: TabBar(                                onTap: (index) {                                  if (index == 0) {                                    setState(() {                                      search_shopping(true, 1);                                    });                                  } else if (index == 1) {                                    if (salesVolumesort == true) {                                      setState(() {                                        status = 2;                                        search_shopping(true, status);                                        salesVolumesort = false;                                        PageNo = 1;                                      });                                    } else {                                      setState(() {                                        status = 3;                                        search_shopping(true, status);                                        salesVolumesort = true;                                        PageNo = 1;                                      });                                    }                                  } else if (index == 2) {                                    if (pricesort == true) {                                      setState(() {                                        status = 4;                                        print(status);                                        search_shopping(true, status);                                        pricesort = false;                                        PageNo = 1;                                      });                                    } else {                                      setState(() {                                        status = 5;                                        print(status);                                        search_shopping(true, status);                                        pricesort = true;                                        PageNo = 1;                                      });                                    }                                  }                                },                                unselectedLabelColor: Colors.grey,                                //设置未选中时的字体颜色，tabs里面的字体样式优先级最高                                unselectedLabelStyle: TextStyle(fontSize: 20),                                //设置未选中时的字体样式，tabs里面的字体样式优先级最高                                labelColor: Colors.black,                                //设置选中时的字体颜色，tabs里面的字体样式优先级最高                                labelStyle: TextStyle(fontSize: 20.0),                                //设置选中时的字体样式，tabs里面的字体样式优先级最高                                isScrollable: false,                                //允许左右滚动                                indicator: const BoxDecoration(),                                tabs: <Widget>[                                  Text(                                    '推荐',                                    style: TextStyle(fontSize: 15),                                  ),                                  Text(                                    '销量',                                    style: TextStyle(fontSize: 15),                                  ),                                  Row(                                    children: <Widget>[                                      Text(                                        '价格',                                        style: TextStyle(fontSize: 15),                                      ),                                      Container(                                        height: 15,                                        width: 15,                                        child: Image.asset(                                          'assets/images/sort.png',                                          fit: BoxFit.cover,                                        ),                                      ),                                    ],                                  ),                                ],                              ),                              width: 280,                            ),                            Row(                              children: <Widget>[                                Text('筛选'),                                Container(                                  height: 20,                                  width: 20,                                  child: Image.asset(                                    'assets/images/screen.png',                                    fit: BoxFit.cover,                                  ),                                ),                              ],                            ),                            SizedBox(                              width: 20,                            ),                            GestureDetector(                              child: Container(                                  height: 17,                                  width: 17,                                  child: columnlayout == false                                      ? Image.asset('assets/images/Diallel.png')                                      : Image.asset('assets/images/SingleColumn.png')),                              onTap: () {                                setState(() {                                  columnlayout == false                                      ? columnlayout = true                                      : columnlayout = false;                                  Layout == false                                      ? Layout = true                                      : Layout = false;                                });                              },                            ),                          ],                        ),                        color: Colors.white,                        height: 50,                      ),                Expanded(                  child: Padding(                      padding:                          EdgeInsets.only(left: 0, right: 0, top: 5, bottom: 5),                      child: new EasyRefresh(                        child: Layout == false                            ? GridView.builder(                                itemCount: datalength,                                //SliverGridDelegateWithFixedCrossAxisCount 构建一个横轴固定数量Widget                                gridDelegate:                                    SliverGridDelegateWithFixedCrossAxisCount(                                        //横轴元素个数                                        crossAxisCount: 2,                                        //纵轴间距                                        mainAxisSpacing: 10.0,                                        //横轴间距                                        crossAxisSpacing: 10.0,                                        //子组件宽高长度比例                                        childAspectRatio: 1.0),                                itemBuilder: (BuildContext context, int index) {                                  int imageindex = index + 1;                                  return Container(                                    color: Colors.white,                                    child: Column(                                      children: <Widget>[                                        Container(                                          height: 110,                                          width: 110,                                          child: Image.network(                                            datas[index].imageUrl,                                            fit: BoxFit.cover,                                          ),                                        ),                                        Container(                                          color: Colors.white,                                          child: Text(datas[index].productName),                                        ),                                        Container(                                          color: Colors.white,                                          child: Text(datas[index].color),                                        ),                                        Container(                                          child: Text('销量' +                                              datas[index]                                                  .salesVolume                                                  .toString()),                                        ),                                        Container(                                          child: Text(                                            '￥' + datas[index].price.toString(),                                          ),                                        ),                                      ],                                    ),                                  );                                })                            : ListView.builder(                                itemExtent: 120,                                itemCount: datalength,                                itemBuilder: (BuildContext context, int index) {                                  int imageindex = index + 1;                                  return GestureDetector(                                    child: Container(                                      color: Colors.white,                                      height: 110, //设置item的高度                                      child: Row(                                        children: <Widget>[                                          Container(                                            height: 110,                                            width: 110,                                            child: Image.network(                                              datas[index].imageUrl,                                              fit: BoxFit.cover,                                            ),                                          ), //涉及到widget的大小或者边框的时候，使用container包裹                                          SizedBox(                                            width: 10,                                          ),                                          Padding(                                            padding: EdgeInsets.only(                                                top: 10, bottom: 10),                                            child: Column(                                              crossAxisAlignment:                                                  CrossAxisAlignment.start,                                              children: <Widget>[                                                Expanded(                                                  child: Container(                                                    child: Text(                                                      datas[index].productName,                                                    ),                                                  ),                                                ),                                                Expanded(                                                  child: Container(                                                    child: Text(                                                      datas[index].color,                                                    ),                                                  ),                                                ),                                                Expanded(                                                  child: Container(                                                    child: Text('销量' +                                                        datas[index]                                                            .salesVolume                                                            .toString()),                                                  ),                                                ),                                                Expanded(                                                  child: Container(                                                    child: Text(                                                      '￥' +                                                          datas[index]                                                              .price                                                              .toString(),                                                    ),                                                  ),                                                ),                                              ],                                            ),                                          )                                        ],                                      ),                                    ),                                    onTap: () {                                      Navigator.of(context).push(                                          MaterialPageRoute(builder: (context) {                                        return ProductDetails(                                            id: datas[index].iD,                                            store: datas[index].storeName,                                            store_icon: datas[index].storeIcon,                                            product_name:                                                datas[index].productName,                                            color: datas[index].color,                                            price: datas[index].price,                                            sales_volume:                                                datas[index].salesVolume);                                      }));                                    },                                  );                                },                              ),                        onRefresh: () async {                          await new Future.delayed(const Duration(seconds: 1),                              () {                            setState(() {                              search_shopping(false, status);                            });                          });                        },                        onLoad: () async {                          await new Future.delayed(const Duration(seconds: 0),                              () {                            setState(() {                              search_shopping(false, status);                            });                          });                        },                      )),                )              ],            )),      ),    );  }}